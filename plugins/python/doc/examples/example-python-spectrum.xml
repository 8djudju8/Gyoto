<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Scenery>

  The goal of this example is to exhibit using a Spectrum coded in
  Python.

  <Metric kind = "KerrBL">
    <Spin> 0. </Spin>
  </Metric>

  <Screen>
    <Position> 1000. 100. 0.78 0. </Position>
    <Time unit="geometrical_time"> 1000. </Time>
    <FieldOfView> 0.314159265358979323846264338327950288419716 </FieldOfView>
    <Resolution> 128 </Resolution>
    <Spectrometer kind="wave" nsamples="1"> 2.0e-6 2.4e-6 </Spectrometer>

  </Screen>

  <Astrobj kind = "Star">
    <Radius> 2. </Radius>
    <Velocity> 0. 0. 0.037037 </Velocity>
    <Position> 600. 9. 1.5707999999999999741 0 </Position>

    The python plug-in must be loaded. It's name changes depending on
    the actual interpreter with which it is linked: it may be
    e.g. python2.7 or python3.4.
    <Spectrum kind="Python">
      Inside our embedded Python interpreter, we load a module. Python
      must be able to find the .py file, set-up PYTHONPATH are needed:
      <Module>gyoto_sample_callbacks</Module>

      Inside this module, we look for a class that implements the
      Spectrum API:
      <Class>PowerLaw</Class>

      This class may take parameters. We are limited to a vector of
      doubles (of arbitrary length). Here, the two values stand for
      Constant and Exponent.
      <Parameters>1. 2.</Parameters>

    </Spectrum>
    <Opacity kind="PowerLaw">
      <Exponent> 0 </Exponent>
      <Constant> 0.1 </Constant>
    </Opacity>
    <RMax> 50. </RMax>
    <OpticallyThick/>
  </Astrobj>

  <Quantities>Spectrum</Quantities>

  <NThreads> 2 </NThreads>

  <MinimumTime> 0. </MinimumTime>

</Scenery>
