Gyoto relies on proper delivery of SIGFPE when arithmetic errors occur
(division by zero, floating point overflows...). It does so by
enabling the right exceptions using feenableexcept from GNU fenv.h.

However, some compilers (clang/llvm, in particular) do not support
setting the floating-point environment and will happily optimize code
assuming that it is safe to divide by zero. We recommend staying away
from these compilers until this issue is fixed:
 https://llvm.org/bugs/show_bug.cgi?id=23707
 https://llvm.org/bugs/show_bug.cgi?id=8100

Alternatively, you may recompile without any optimization by passing
the right flags during configure:
 ./configure CFLAGS="-g -O0" CXXFLAGS="-g -O0"

If you experience such spurious SIGFPE inside the Yorick plug-in, an
ugly workaround is to call gyoto.fedisableexcept right before the
offending Gyoto call. If at all possible, consider recompiling Gyoto
as explained above.
